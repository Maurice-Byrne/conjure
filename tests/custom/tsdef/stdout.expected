type AbstractLiteral<T> = IAbsLitTuple<T> | IAbsLitRecord<T> | IAbsLitVariant<T> | IAbsLitMatrix<T> | IAbsLitSet<T> | IAbsLitMSet<T> | IAbsLitFunction<T> | IAbsLitSequence<T> | IAbsLitRelation<T> | IAbsLitPartition<T>;

interface IAbsLitTuple<T> {
  tag: "AbsLitTuple";
  contents: Expression[];
}

interface IAbsLitRecord<T> {
  tag: "AbsLitRecord";
  contents: [Name, Expression][];
}

interface IAbsLitVariant<T> {
  tag: "AbsLitVariant";
  contents: [[Name, Domain<void, Expression>][], Name, Expression];
}

interface IAbsLitMatrix<T> {
  tag: "AbsLitMatrix";
  contents: [Domain<void, Expression>, Expression[]];
}

interface IAbsLitSet<T> {
  tag: "AbsLitSet";
  contents: Expression[];
}

interface IAbsLitMSet<T> {
  tag: "AbsLitMSet";
  contents: Expression[];
}

interface IAbsLitFunction<T> {
  tag: "AbsLitFunction";
  contents: [Expression, Expression][];
}

interface IAbsLitSequence<T> {
  tag: "AbsLitSequence";
  contents: Expression[];
}

interface IAbsLitRelation<T> {
  tag: "AbsLitRelation";
  contents: Expression[][];
}

interface IAbsLitPartition<T> {
  tag: "AbsLitPartition";
  contents: Expression[][];
}

type AbstractPattern = ISingle | IAbsPatTuple | IAbsPatMatrix | IAbsPatSet | IAbstractPatternMetaVar;

interface ISingle {
  tag: "Single";
  contents: Name;
}

interface IAbsPatTuple {
  tag: "AbsPatTuple";
  contents: AbstractPattern[];
}

interface IAbsPatMatrix {
  tag: "AbsPatMatrix";
  contents: AbstractPattern[];
}

interface IAbsPatSet {
  tag: "AbsPatSet";
  contents: AbstractPattern[];
}

interface IAbstractPatternMetaVar {
  tag: "AbstractPatternMetaVar";
  contents: string;
}

type AttrName = "AttrName_size" | "AttrName_minSize" | "AttrName_maxSize" | "AttrName_minOccur" | "AttrName_maxOccur" | "AttrName_numParts" | "AttrName_minNumParts" | "AttrName_maxNumParts" | "AttrName_partSize" | "AttrName_minPartSize" | "AttrName_maxPartSize" | "AttrName_total" | "AttrName_injective" | "AttrName_surjective" | "AttrName_bijective" | "AttrName_regular" | "AttrName_reflexive" | "AttrName_irreflexive" | "AttrName_coreflexive" | "AttrName_symmetric" | "AttrName_antiSymmetric" | "AttrName_aSymmetric" | "AttrName_transitive" | "AttrName_leftTotal" | "AttrName_rightTotal" | "AttrName_connex" | "AttrName_Euclidean" | "AttrName_serial" | "AttrName_equivalence" | "AttrName_partialOrder" | "AttrName_linearOrder" | "AttrName_weakOrder" | "AttrName_preOrder" | "AttrName_strictPartialOrder";

type BinaryRelationAttr = "BinRelAttr_Reflexive" | "BinRelAttr_Irreflexive" | "BinRelAttr_Coreflexive" | "BinRelAttr_Symmetric" | "BinRelAttr_AntiSymmetric" | "BinRelAttr_ASymmetric" | "BinRelAttr_Transitive" | "BinRelAttr_Total" | "BinRelAttr_LeftTotal" | "BinRelAttr_RightTotal" | "BinRelAttr_Connex" | "BinRelAttr_Euclidean" | "BinRelAttr_Serial" | "BinRelAttr_Equivalence" | "BinRelAttr_PartialOrder" | "BinRelAttr_LinearOrder" | "BinRelAttr_WeakOrder" | "BinRelAttr_PreOrder" | "BinRelAttr_StrictPartialOrder";

type BinaryRelationAttrs = IBinaryRelationAttrs;

type IBinaryRelationAttrs = BinaryRelationAttr[];

type Constant = IConstantBool | IConstantInt | IConstantEnum | IConstantField | IConstantAbstract | IDomainInConstant | ITypedConstant | IConstantUndefined;

interface IConstantBool {
  tag: "ConstantBool";
  contents: boolean;
}

interface IConstantInt {
  tag: "ConstantInt";
  contents: [IntTag, number];
}

interface IConstantEnum {
  tag: "ConstantEnum";
  contents: [Name, Name[], Name];
}

interface IConstantField {
  tag: "ConstantField";
  contents: [Name, Type];
}

interface IConstantAbstract {
  tag: "ConstantAbstract";
  contents: AbstractLiteral<Constant>;
}

interface IDomainInConstant {
  tag: "DomainInConstant";
  contents: Domain<void, Constant>;
}

interface ITypedConstant {
  tag: "TypedConstant";
  contents: [Constant, Type];
}

interface IConstantUndefined {
  tag: "ConstantUndefined";
  contents: [string, Type];
}

type Decision = IDecision;

interface IDecision {
  dDescription: string[];
  dNumOptions: number | null;
  dDecision: number;
}

type Declaration = IFindOrGiven | ILetting | IGivenDomainDefnEnum | ILettingDomainDefnEnum | ILettingDomainDefnUnnamed;

interface IFindOrGiven {
  tag: "FindOrGiven";
  contents: [FindOrGiven, Name, Domain<void, Expression>];
}

interface ILetting {
  tag: "Letting";
  contents: [Name, Expression];
}

interface IGivenDomainDefnEnum {
  tag: "GivenDomainDefnEnum";
  contents: Name;
}

interface ILettingDomainDefnEnum {
  tag: "LettingDomainDefnEnum";
  contents: [Name, Name[]];
}

interface ILettingDomainDefnUnnamed {
  tag: "LettingDomainDefnUnnamed";
  contents: [Name, Expression];
}

type Domain<T1, T2> = IDomainAny<T1, T2> | IDomainBool<T1, T2> | IDomainIntE<T1, T2> | IDomainInt<T1, T2> | IDomainEnum<T1, T2> | IDomainUnnamed<T1, T2> | IDomainTuple<T1, T2> | IDomainRecord<T1, T2> | IDomainVariant<T1, T2> | IDomainMatrix<T1, T2> | IDomainSet<T1, T2> | IDomainMSet<T1, T2> | IDomainFunction<T1, T2> | IDomainSequence<T1, T2> | IDomainRelation<T1, T2> | IDomainPartition<T1, T2> | IDomainOp<T1, T2> | IDomainReference<T1, T2> | IDomainMetaVar<T1, T2>;

interface IDomainAny<T1, T2> {
  tag: "DomainAny";
  contents: [string, Type];
}

interface IDomainBool<T1, T2> {
  tag: "DomainBool";
}

interface IDomainIntE<T1, T2> {
  tag: "DomainIntE";
  contents: Expression;
}

interface IDomainInt<T1, T2> {
  tag: "DomainInt";
  contents: [IntTag, Range<Expression>[]];
}

interface IDomainEnum<T1, T2> {
  tag: "DomainEnum";
  contents: [Name, Range<Expression>[], [Name, number][]];
}

interface IDomainUnnamed<T1, T2> {
  tag: "DomainUnnamed";
  contents: [Name, Expression];
}

interface IDomainTuple<T1, T2> {
  tag: "DomainTuple";
  contents: Domain<void, Expression>[];
}

interface IDomainRecord<T1, T2> {
  tag: "DomainRecord";
  contents: [Name, Domain<void, Expression>][];
}

interface IDomainVariant<T1, T2> {
  tag: "DomainVariant";
  contents: [Name, Domain<void, Expression>][];
}

interface IDomainMatrix<T1, T2> {
  tag: "DomainMatrix";
  contents: [Domain<void, Expression>, Domain<void, Expression>];
}

interface IDomainSet<T1, T2> {
  tag: "DomainSet";
  contents: [void, SetAttr<Expression>, Domain<void, Expression>];
}

interface IDomainMSet<T1, T2> {
  tag: "DomainMSet";
  contents: [void, MSetAttr<Expression>, Domain<void, Expression>];
}

interface IDomainFunction<T1, T2> {
  tag: "DomainFunction";
  contents: [void, FunctionAttr<Expression>, Domain<void, Expression>, Domain<void, Expression>];
}

interface IDomainSequence<T1, T2> {
  tag: "DomainSequence";
  contents: [void, SequenceAttr<Expression>, Domain<void, Expression>];
}

interface IDomainRelation<T1, T2> {
  tag: "DomainRelation";
  contents: [void, RelationAttr<Expression>, Domain<void, Expression>[]];
}

interface IDomainPartition<T1, T2> {
  tag: "DomainPartition";
  contents: [void, PartitionAttr<Expression>, Domain<void, Expression>];
}

interface IDomainOp<T1, T2> {
  tag: "DomainOp";
  contents: [Name, Domain<void, Expression>[]];
}

interface IDomainReference<T1, T2> {
  tag: "DomainReference";
  contents: [Name, Domain<void, Expression>];
}

interface IDomainMetaVar<T1, T2> {
  tag: "DomainMetaVar";
  contents: string;
}

type Expression = IConstant | IAbstractLiteral | IDomain | IReference | IWithLocals | IComprehension | ITyped | IOp | IExpressionMetaVar;

interface IConstant {
  tag: "Constant";
  contents: Constant;
}

interface IAbstractLiteral {
  tag: "AbstractLiteral";
  contents: AbstractLiteral<Expression>;
}

interface IDomain {
  tag: "Domain";
  contents: Domain<void, Expression>;
}

interface IReference {
  tag: "Reference";
  contents: [Name, ReferenceTo];
}

interface IWithLocals {
  tag: "WithLocals";
  contents: [Expression, InBubble];
}

interface IComprehension {
  tag: "Comprehension";
  contents: [Expression, GeneratorOrCondition[]];
}

interface ITyped {
  tag: "Typed";
  contents: [Expression, Type];
}

interface IOp {
  tag: "Op";
  contents: Op<Expression>;
}

interface IExpressionMetaVar {
  tag: "ExpressionMetaVar";
  contents: string;
}

type FindOrGiven = "Find" | "Given" | "Quantified" | "CutFind" | "LocalFind";

type FunctionAttr<T> = IFunctionAttr<T>;

type IFunctionAttr<T> = [SizeAttr<Expression>, PartialityAttr, JectivityAttr];

type Generator = IGenDomainNoRepr | IGenDomainHasRepr | IGenInExpr;

interface IGenDomainNoRepr {
  tag: "GenDomainNoRepr";
  contents: [AbstractPattern, Domain<void, Expression>];
}

interface IGenDomainHasRepr {
  tag: "GenDomainHasRepr";
  contents: [Name, Domain<HasRepresentation, Expression>];
}

interface IGenInExpr {
  tag: "GenInExpr";
  contents: [AbstractPattern, Expression];
}

type GeneratorOrCondition = IGenerator | ICondition | IComprehensionLetting;

interface IGenerator {
  tag: "Generator";
  contents: Generator;
}

interface ICondition {
  tag: "Condition";
  contents: Expression;
}

interface IComprehensionLetting {
  tag: "ComprehensionLetting";
  contents: [AbstractPattern, Expression];
}

type HasRepresentation = INoRepresentation | ISet_Occurrence | ISet_Explicit | ISet_ExplicitVarSizeWithFlags | ISet_ExplicitVarSizeWithMarker | ISet_ExplicitVarSizeWithDummy | IMSet_Occurrence | IMSet_ExplicitWithFlags | IMSet_ExplicitWithRepetition | IFunction_1D | IFunction_1DPartial | IFunction_ND | IFunction_NDPartial | IFunction_NDPartialDummy | IFunction_AsRelation | ISequence_ExplicitBounded | IRelation_AsMatrix | IRelation_AsSet | IPartition_AsSet | IPartition_Occurrence;

interface INoRepresentation {
  tag: "NoRepresentation";
}

interface ISet_Occurrence {
  tag: "Set_Occurrence";
}

interface ISet_Explicit {
  tag: "Set_Explicit";
}

interface ISet_ExplicitVarSizeWithFlags {
  tag: "Set_ExplicitVarSizeWithFlags";
}

interface ISet_ExplicitVarSizeWithMarker {
  tag: "Set_ExplicitVarSizeWithMarker";
}

interface ISet_ExplicitVarSizeWithDummy {
  tag: "Set_ExplicitVarSizeWithDummy";
}

interface IMSet_Occurrence {
  tag: "MSet_Occurrence";
}

interface IMSet_ExplicitWithFlags {
  tag: "MSet_ExplicitWithFlags";
}

interface IMSet_ExplicitWithRepetition {
  tag: "MSet_ExplicitWithRepetition";
}

interface IFunction_1D {
  tag: "Function_1D";
}

interface IFunction_1DPartial {
  tag: "Function_1DPartial";
}

interface IFunction_ND {
  tag: "Function_ND";
}

interface IFunction_NDPartial {
  tag: "Function_NDPartial";
}

interface IFunction_NDPartialDummy {
  tag: "Function_NDPartialDummy";
}

interface IFunction_AsRelation {
  tag: "Function_AsRelation";
  contents: HasRepresentation;
}

interface ISequence_ExplicitBounded {
  tag: "Sequence_ExplicitBounded";
}

interface IRelation_AsMatrix {
  tag: "Relation_AsMatrix";
}

interface IRelation_AsSet {
  tag: "Relation_AsSet";
  contents: HasRepresentation;
}

interface IPartition_AsSet {
  tag: "Partition_AsSet";
  contents: [HasRepresentation, HasRepresentation];
}

interface IPartition_Occurrence {
  tag: "Partition_Occurrence";
}

type InBubble = IAuxiliaryVars | IDefinednessConstraints;

interface IAuxiliaryVars {
  tag: "AuxiliaryVars";
  contents: Statement[];
}

interface IDefinednessConstraints {
  tag: "DefinednessConstraints";
  contents: Expression[];
}

type IntTag = ITagInt | ITagEnum | ITagUnnamed;

interface ITagInt {
  tag: "TagInt";
}

interface ITagEnum {
  tag: "TagEnum";
  contents: string;
}

interface ITagUnnamed {
  tag: "TagUnnamed";
  contents: string;
}

type JectivityAttr = "JectivityAttr_None" | "JectivityAttr_Injective" | "JectivityAttr_Surjective" | "JectivityAttr_Bijective";

type LanguageVersion = ILanguageVersion;

type ILanguageVersion = [Name, number[]];

type Model = IModel;

interface IModel {
  mLanguage: LanguageVersion;
  mStatements: Statement[];
  mInfo: ModelInfo;
}

type ModelInfo = IModelInfo;

interface IModelInfo {
  miGivens: Name[];
  miFinds: Name[];
  miLettings: [Name, Expression][];
  miEnumGivens: Name[];
  miEnumLettings: Declaration[];
  miUnnameds: [Name, Expression][];
  miOriginalDomains: [Name, Domain<void, Expression>][];
  miRepresentations: [Name, Domain<HasRepresentation, Expression>][];
  miRepresentationsTree: [Name, Tree<HasRepresentation>[]][];
  miStrategyQ: Strategy;
  miStrategyA: Strategy;
  miTrailCompact: [number, number, number][];
  miTrailGeneralised: [number, number][];
  miTrailVerbose: Decision[];
  miTrailRewrites: TrailRewrites[];
  miNameGenState: [string, number][];
  miNbExtraGivens: number;
}

type MSetAttr<T> = IMSetAttr<T>;

type IMSetAttr<T> = [SizeAttr<Expression>, OccurAttr<Expression>];

type Name = IName | IMachineName | INameMetaVar;

interface IName {
  tag: "Name";
  contents: string;
}

interface IMachineName {
  tag: "MachineName";
  contents: [string, number, string[]];
}

interface INameMetaVar {
  tag: "NameMetaVar";
  contents: string;
}

type Objective = "Minimising" | "Maximising";

type OccurAttr<T> = IOccurAttr_None<T> | IOccurAttr_MinOccur<T> | IOccurAttr_MaxOccur<T> | IOccurAttr_MinMaxOccur<T>;

interface IOccurAttr_None<T> {
  tag: "OccurAttr_None";
}

interface IOccurAttr_MinOccur<T> {
  tag: "OccurAttr_MinOccur";
  contents: Expression;
}

interface IOccurAttr_MaxOccur<T> {
  tag: "OccurAttr_MaxOccur";
  contents: Expression;
}

interface IOccurAttr_MinMaxOccur<T> {
  tag: "OccurAttr_MinMaxOccur";
  contents: [Expression, Expression];
}

type Op<T> = IMkOpActive<T> | IMkOpAllDiff<T> | IMkOpAllDiffExcept<T> | IMkOpAnd<T> | IMkOpApart<T> | IMkOpAtLeast<T> | IMkOpAtMost<T> | IMkOpAttributeAsConstraint<T> | IMkOpCatchUndef<T> | IMkOpDefined<T> | IMkOpDiv<T> | IMkOpDontCare<T> | IMkOpDotLeq<T> | IMkOpDotLt<T> | IMkOpEq<T> | IMkOpFactorial<T> | IMkOpFlatten<T> | IMkOpFreq<T> | IMkOpGCC<T> | IMkOpGeq<T> | IMkOpGt<T> | IMkOpHist<T> | IMkOpIff<T> | IMkOpImage<T> | IMkOpImageSet<T> | IMkOpImply<T> | IMkOpIn<T> | IMkOpIndexing<T> | IMkOpIntersect<T> | IMkOpInverse<T> | IMkOpLeq<T> | IMkOpLexLeq<T> | IMkOpLexLt<T> | IMkOpLt<T> | IMkOpMakeTable<T> | IMkOpMax<T> | IMkOpMin<T> | IMkOpMinus<T> | IMkOpMod<T> | IMkOpNegate<T> | IMkOpNeq<T> | IMkOpNot<T> | IMkOpOr<T> | IMkOpParticipants<T> | IMkOpParts<T> | IMkOpParty<T> | IMkOpPow<T> | IMkOpPowerSet<T> | IMkOpPreImage<T> | IMkOpPred<T> | IMkOpProduct<T> | IMkOpRange<T> | IMkOpRelationProj<T> | IMkOpRestrict<T> | IMkOpSlicing<T> | IMkOpSubsequence<T> | IMkOpSubset<T> | IMkOpSubsetEq<T> | IMkOpSubstring<T> | IMkOpSucc<T> | IMkOpSum<T> | IMkOpSupset<T> | IMkOpSupsetEq<T> | IMkOpTable<T> | IMkOpTildeLeq<T> | IMkOpTildeLt<T> | IMkOpToInt<T> | IMkOpToMSet<T> | IMkOpToRelation<T> | IMkOpToSet<T> | IMkOpTogether<T> | IMkOpTransform<T> | IMkOpTrue<T> | IMkOpTwoBars<T> | IMkOpUnion<T> | IMkOpXor<T>;

interface IMkOpActive<T> {
  tag: "MkOpActive";
  contents: OpActive<Expression>;
}

interface IMkOpAllDiff<T> {
  tag: "MkOpAllDiff";
  contents: OpAllDiff<Expression>;
}

interface IMkOpAllDiffExcept<T> {
  tag: "MkOpAllDiffExcept";
  contents: OpAllDiffExcept<Expression>;
}

interface IMkOpAnd<T> {
  tag: "MkOpAnd";
  contents: OpAnd<Expression>;
}

interface IMkOpApart<T> {
  tag: "MkOpApart";
  contents: OpApart<Expression>;
}

interface IMkOpAtLeast<T> {
  tag: "MkOpAtLeast";
  contents: OpAtLeast<Expression>;
}

interface IMkOpAtMost<T> {
  tag: "MkOpAtMost";
  contents: OpAtMost<Expression>;
}

interface IMkOpAttributeAsConstraint<T> {
  tag: "MkOpAttributeAsConstraint";
  contents: OpAttributeAsConstraint<Expression>;
}

interface IMkOpCatchUndef<T> {
  tag: "MkOpCatchUndef";
  contents: OpCatchUndef<Expression>;
}

interface IMkOpDefined<T> {
  tag: "MkOpDefined";
  contents: OpDefined<Expression>;
}

interface IMkOpDiv<T> {
  tag: "MkOpDiv";
  contents: OpDiv<Expression>;
}

interface IMkOpDontCare<T> {
  tag: "MkOpDontCare";
  contents: OpDontCare<Expression>;
}

interface IMkOpDotLeq<T> {
  tag: "MkOpDotLeq";
  contents: OpDotLeq<Expression>;
}

interface IMkOpDotLt<T> {
  tag: "MkOpDotLt";
  contents: OpDotLt<Expression>;
}

interface IMkOpEq<T> {
  tag: "MkOpEq";
  contents: OpEq<Expression>;
}

interface IMkOpFactorial<T> {
  tag: "MkOpFactorial";
  contents: OpFactorial<Expression>;
}

interface IMkOpFlatten<T> {
  tag: "MkOpFlatten";
  contents: OpFlatten<Expression>;
}

interface IMkOpFreq<T> {
  tag: "MkOpFreq";
  contents: OpFreq<Expression>;
}

interface IMkOpGCC<T> {
  tag: "MkOpGCC";
  contents: OpGCC<Expression>;
}

interface IMkOpGeq<T> {
  tag: "MkOpGeq";
  contents: OpGeq<Expression>;
}

interface IMkOpGt<T> {
  tag: "MkOpGt";
  contents: OpGt<Expression>;
}

interface IMkOpHist<T> {
  tag: "MkOpHist";
  contents: OpHist<Expression>;
}

interface IMkOpIff<T> {
  tag: "MkOpIff";
  contents: OpIff<Expression>;
}

interface IMkOpImage<T> {
  tag: "MkOpImage";
  contents: OpImage<Expression>;
}

interface IMkOpImageSet<T> {
  tag: "MkOpImageSet";
  contents: OpImageSet<Expression>;
}

interface IMkOpImply<T> {
  tag: "MkOpImply";
  contents: OpImply<Expression>;
}

interface IMkOpIn<T> {
  tag: "MkOpIn";
  contents: OpIn<Expression>;
}

interface IMkOpIndexing<T> {
  tag: "MkOpIndexing";
  contents: OpIndexing<Expression>;
}

interface IMkOpIntersect<T> {
  tag: "MkOpIntersect";
  contents: OpIntersect<Expression>;
}

interface IMkOpInverse<T> {
  tag: "MkOpInverse";
  contents: OpInverse<Expression>;
}

interface IMkOpLeq<T> {
  tag: "MkOpLeq";
  contents: OpLeq<Expression>;
}

interface IMkOpLexLeq<T> {
  tag: "MkOpLexLeq";
  contents: OpLexLeq<Expression>;
}

interface IMkOpLexLt<T> {
  tag: "MkOpLexLt";
  contents: OpLexLt<Expression>;
}

interface IMkOpLt<T> {
  tag: "MkOpLt";
  contents: OpLt<Expression>;
}

interface IMkOpMakeTable<T> {
  tag: "MkOpMakeTable";
  contents: OpMakeTable<Expression>;
}

interface IMkOpMax<T> {
  tag: "MkOpMax";
  contents: OpMax<Expression>;
}

interface IMkOpMin<T> {
  tag: "MkOpMin";
  contents: OpMin<Expression>;
}

interface IMkOpMinus<T> {
  tag: "MkOpMinus";
  contents: OpMinus<Expression>;
}

interface IMkOpMod<T> {
  tag: "MkOpMod";
  contents: OpMod<Expression>;
}

interface IMkOpNegate<T> {
  tag: "MkOpNegate";
  contents: OpNegate<Expression>;
}

interface IMkOpNeq<T> {
  tag: "MkOpNeq";
  contents: OpNeq<Expression>;
}

interface IMkOpNot<T> {
  tag: "MkOpNot";
  contents: OpNot<Expression>;
}

interface IMkOpOr<T> {
  tag: "MkOpOr";
  contents: OpOr<Expression>;
}

interface IMkOpParticipants<T> {
  tag: "MkOpParticipants";
  contents: OpParticipants<Expression>;
}

interface IMkOpParts<T> {
  tag: "MkOpParts";
  contents: OpParts<Expression>;
}

interface IMkOpParty<T> {
  tag: "MkOpParty";
  contents: OpParty<Expression>;
}

interface IMkOpPow<T> {
  tag: "MkOpPow";
  contents: OpPow<Expression>;
}

interface IMkOpPowerSet<T> {
  tag: "MkOpPowerSet";
  contents: OpPowerSet<Expression>;
}

interface IMkOpPreImage<T> {
  tag: "MkOpPreImage";
  contents: OpPreImage<Expression>;
}

interface IMkOpPred<T> {
  tag: "MkOpPred";
  contents: OpPred<Expression>;
}

interface IMkOpProduct<T> {
  tag: "MkOpProduct";
  contents: OpProduct<Expression>;
}

interface IMkOpRange<T> {
  tag: "MkOpRange";
  contents: OpRange<Expression>;
}

interface IMkOpRelationProj<T> {
  tag: "MkOpRelationProj";
  contents: OpRelationProj<Expression>;
}

interface IMkOpRestrict<T> {
  tag: "MkOpRestrict";
  contents: OpRestrict<Expression>;
}

interface IMkOpSlicing<T> {
  tag: "MkOpSlicing";
  contents: OpSlicing<Expression>;
}

interface IMkOpSubsequence<T> {
  tag: "MkOpSubsequence";
  contents: OpSubsequence<Expression>;
}

interface IMkOpSubset<T> {
  tag: "MkOpSubset";
  contents: OpSubset<Expression>;
}

interface IMkOpSubsetEq<T> {
  tag: "MkOpSubsetEq";
  contents: OpSubsetEq<Expression>;
}

interface IMkOpSubstring<T> {
  tag: "MkOpSubstring";
  contents: OpSubstring<Expression>;
}

interface IMkOpSucc<T> {
  tag: "MkOpSucc";
  contents: OpSucc<Expression>;
}

interface IMkOpSum<T> {
  tag: "MkOpSum";
  contents: OpSum<Expression>;
}

interface IMkOpSupset<T> {
  tag: "MkOpSupset";
  contents: OpSupset<Expression>;
}

interface IMkOpSupsetEq<T> {
  tag: "MkOpSupsetEq";
  contents: OpSupsetEq<Expression>;
}

interface IMkOpTable<T> {
  tag: "MkOpTable";
  contents: OpTable<Expression>;
}

interface IMkOpTildeLeq<T> {
  tag: "MkOpTildeLeq";
  contents: OpTildeLeq<Expression>;
}

interface IMkOpTildeLt<T> {
  tag: "MkOpTildeLt";
  contents: OpTildeLt<Expression>;
}

interface IMkOpToInt<T> {
  tag: "MkOpToInt";
  contents: OpToInt<Expression>;
}

interface IMkOpToMSet<T> {
  tag: "MkOpToMSet";
  contents: OpToMSet<Expression>;
}

interface IMkOpToRelation<T> {
  tag: "MkOpToRelation";
  contents: OpToRelation<Expression>;
}

interface IMkOpToSet<T> {
  tag: "MkOpToSet";
  contents: OpToSet<Expression>;
}

interface IMkOpTogether<T> {
  tag: "MkOpTogether";
  contents: OpTogether<Expression>;
}

interface IMkOpTransform<T> {
  tag: "MkOpTransform";
  contents: OpTransform<Expression>;
}

interface IMkOpTrue<T> {
  tag: "MkOpTrue";
  contents: OpTrue<Expression>;
}

interface IMkOpTwoBars<T> {
  tag: "MkOpTwoBars";
  contents: OpTwoBars<Expression>;
}

interface IMkOpUnion<T> {
  tag: "MkOpUnion";
  contents: OpUnion<Expression>;
}

interface IMkOpXor<T> {
  tag: "MkOpXor";
  contents: OpXor<Expression>;
}

type OpActive<T> = IOpActive<T>;

type IOpActive<T> = [Expression, Name];

type OpAllDiff<T> = IOpAllDiff<T>;

type IOpAllDiff<T> = Expression;

type OpAllDiffExcept<T> = IOpAllDiffExcept<T>;

type IOpAllDiffExcept<T> = [Expression, Expression];

type OpAnd<T> = IOpAnd<T>;

type IOpAnd<T> = Expression;

type OpApart<T> = IOpApart<T>;

type IOpApart<T> = [Expression, Expression];

type OpAtLeast<T> = IOpAtLeast<T>;

type IOpAtLeast<T> = [Expression, Expression, Expression];

type OpAtMost<T> = IOpAtMost<T>;

type IOpAtMost<T> = [Expression, Expression, Expression];

type OpAttributeAsConstraint<T> = IOpAttributeAsConstraint<T>;

type IOpAttributeAsConstraint<T> = [Expression, AttrName, Expression];

type OpCatchUndef<T> = IOpCatchUndef<T>;

type IOpCatchUndef<T> = [Expression, Expression];

type OpDefined<T> = IOpDefined<T>;

type IOpDefined<T> = Expression;

type OpDiv<T> = IOpDiv<T>;

type IOpDiv<T> = [Expression, Expression];

type OpDontCare<T> = IOpDontCare<T>;

type IOpDontCare<T> = Expression;

type OpDotLeq<T> = IOpDotLeq<T>;

type IOpDotLeq<T> = [Expression, Expression];

type OpDotLt<T> = IOpDotLt<T>;

type IOpDotLt<T> = [Expression, Expression];

type OpEq<T> = IOpEq<T>;

type IOpEq<T> = [Expression, Expression];

type OpFactorial<T> = IOpFactorial<T>;

type IOpFactorial<T> = Expression;

type OpFlatten<T> = IOpFlatten<T>;

type IOpFlatten<T> = [number, Expression];

type OpFreq<T> = IOpFreq<T>;

type IOpFreq<T> = [Expression, Expression];

type OpGCC<T> = IOpGCC<T>;

type IOpGCC<T> = [Expression, Expression, Expression];

type OpGeq<T> = IOpGeq<T>;

type IOpGeq<T> = [Expression, Expression];

type OpGt<T> = IOpGt<T>;

type IOpGt<T> = [Expression, Expression];

type OpHist<T> = IOpHist<T>;

type IOpHist<T> = Expression;

type OpIff<T> = IOpIff<T>;

type IOpIff<T> = [Expression, Expression];

type OpImage<T> = IOpImage<T>;

type IOpImage<T> = [Expression, Expression];

type OpImageSet<T> = IOpImageSet<T>;

type IOpImageSet<T> = [Expression, Expression];

type OpImply<T> = IOpImply<T>;

type IOpImply<T> = [Expression, Expression];

type OpIn<T> = IOpIn<T>;

type IOpIn<T> = [Expression, Expression];

type OpIndexing<T> = IOpIndexing<T>;

type IOpIndexing<T> = [Expression, Expression];

type OpIntersect<T> = IOpIntersect<T>;

type IOpIntersect<T> = [Expression, Expression];

type OpInverse<T> = IOpInverse<T>;

type IOpInverse<T> = [Expression, Expression];

type OpLeq<T> = IOpLeq<T>;

type IOpLeq<T> = [Expression, Expression];

type OpLexLeq<T> = IOpLexLeq<T>;

type IOpLexLeq<T> = [Expression, Expression];

type OpLexLt<T> = IOpLexLt<T>;

type IOpLexLt<T> = [Expression, Expression];

type OpLt<T> = IOpLt<T>;

type IOpLt<T> = [Expression, Expression];

type OpMax<T> = IOpMax<T>;

type IOpMax<T> = Expression;

type OpMin<T> = IOpMin<T>;

type IOpMin<T> = Expression;

type OpMinus<T> = IOpMinus<T>;

type IOpMinus<T> = [Expression, Expression];

type OpMod<T> = IOpMod<T>;

type IOpMod<T> = [Expression, Expression];

type OpNegate<T> = IOpNegate<T>;

type IOpNegate<T> = Expression;

type OpNeq<T> = IOpNeq<T>;

type IOpNeq<T> = [Expression, Expression];

type OpNot<T> = IOpNot<T>;

type IOpNot<T> = Expression;

type OpOr<T> = IOpOr<T>;

type IOpOr<T> = Expression;

type OpParticipants<T> = IOpParticipants<T>;

type IOpParticipants<T> = Expression;

type OpParts<T> = IOpParts<T>;

type IOpParts<T> = Expression;

type OpParty<T> = IOpParty<T>;

type IOpParty<T> = [Expression, Expression];

type OpPow<T> = IOpPow<T>;

type IOpPow<T> = [Expression, Expression];

type OpPowerSet<T> = IOpPowerSet<T>;

type IOpPowerSet<T> = Expression;

type OpPred<T> = IOpPred<T>;

type IOpPred<T> = Expression;

type OpPreImage<T> = IOpPreImage<T>;

type IOpPreImage<T> = [Expression, Expression];

type OpProduct<T> = IOpProduct<T>;

type IOpProduct<T> = Expression;

type OpRange<T> = IOpRange<T>;

type IOpRange<T> = Expression;

type OpRelationProj<T> = IOpRelationProj<T>;

type IOpRelationProj<T> = [Expression, Expression[]];

type OpRestrict<T> = IOpRestrict<T>;

type IOpRestrict<T> = [Expression, Expression];

type OpSlicing<T> = IOpSlicing<T>;

type IOpSlicing<T> = [Expression, Expression, Expression];

type OpSubsequence<T> = IOpSubsequence<T>;

type IOpSubsequence<T> = [Expression, Expression];

type OpSubset<T> = IOpSubset<T>;

type IOpSubset<T> = [Expression, Expression];

type OpSubsetEq<T> = IOpSubsetEq<T>;

type IOpSubsetEq<T> = [Expression, Expression];

type OpSubstring<T> = IOpSubstring<T>;

type IOpSubstring<T> = [Expression, Expression];

type OpSucc<T> = IOpSucc<T>;

type IOpSucc<T> = Expression;

type OpSum<T> = IOpSum<T>;

type IOpSum<T> = Expression;

type OpSupset<T> = IOpSupset<T>;

type IOpSupset<T> = [Expression, Expression];

type OpSupsetEq<T> = IOpSupsetEq<T>;

type IOpSupsetEq<T> = [Expression, Expression];

type OpTable<T> = IOpTable<T>;

type IOpTable<T> = [Expression, Expression];

type OpTildeLeq<T> = IOpTildeLeq<T>;

type IOpTildeLeq<T> = [Expression, Expression];

type OpTildeLt<T> = IOpTildeLt<T>;

type IOpTildeLt<T> = [Expression, Expression];

type OpTogether<T> = IOpTogether<T>;

type IOpTogether<T> = [Expression, Expression];

type OpToInt<T> = IOpToInt<T>;

type IOpToInt<T> = Expression;

type OpToMSet<T> = IOpToMSet<T>;

type IOpToMSet<T> = Expression;

type OpToRelation<T> = IOpToRelation<T>;

type IOpToRelation<T> = Expression;

type OpToSet<T> = IOpToSet<T>;

type IOpToSet<T> = [boolean, Expression];

type OpTransform<T> = IOpTransform<T>;

type IOpTransform<T> = [Expression, Expression];

type OpTrue<T> = IOpTrue<T>;

type IOpTrue<T> = Expression;

type OpTwoBars<T> = IOpTwoBars<T>;

type IOpTwoBars<T> = Expression;

type OpUnion<T> = IOpUnion<T>;

type IOpUnion<T> = [Expression, Expression];

type OpXor<T> = IOpXor<T>;

type IOpXor<T> = Expression;

type PartialityAttr = "PartialityAttr_Partial" | "PartialityAttr_Total";

type PartitionAttr<T> = IPartitionAttr<T>;

interface IPartitionAttr<T> {
  partsNum: SizeAttr<Type>;
  partsSize: SizeAttr<Type>;
  isRegular: boolean;
}

type Range<T> = IRangeOpen<T> | IRangeSingle<T> | IRangeLowerBounded<T> | IRangeUpperBounded<T> | IRangeBounded<T>;

interface IRangeOpen<T> {
  tag: "RangeOpen";
}

interface IRangeSingle<T> {
  tag: "RangeSingle";
  contents: Type;
}

interface IRangeLowerBounded<T> {
  tag: "RangeLowerBounded";
  contents: Type;
}

interface IRangeUpperBounded<T> {
  tag: "RangeUpperBounded";
  contents: Type;
}

interface IRangeBounded<T> {
  tag: "RangeBounded";
  contents: [Type, Type];
}

type ReferenceTo = IAlias | IInComprehension | IDeclNoRepr | IDeclHasRepr | IRecordField | IVariantField;

interface IAlias {
  tag: "Alias";
  contents: Expression;
}

interface IInComprehension {
  tag: "InComprehension";
  contents: Generator;
}

interface IDeclNoRepr {
  tag: "DeclNoRepr";
  contents: [FindOrGiven, Name, Domain<void, Expression>, Region];
}

interface IDeclHasRepr {
  tag: "DeclHasRepr";
  contents: [FindOrGiven, Name, Domain<HasRepresentation, Expression>];
}

interface IRecordField {
  tag: "RecordField";
  contents: [Name, Type];
}

interface IVariantField {
  tag: "VariantField";
  contents: [Name, Type];
}

type Region = INoRegion | IRegion;

interface INoRegion {
  tag: "NoRegion";
}

interface IRegion {
  tag: "Region";
  contents: number;
}

type RelationAttr<T> = IRelationAttr<T>;

type IRelationAttr<T> = [SizeAttr<Type>, BinaryRelationAttrs];

type SearchOrder = IBranchingOn | ICut;

interface IBranchingOn {
  tag: "BranchingOn";
  contents: Name;
}

interface ICut {
  tag: "Cut";
  contents: Expression;
}

type SequenceAttr<T> = ISequenceAttr<T>;

type ISequenceAttr<T> = [SizeAttr<Type>, JectivityAttr];

type SetAttr<T> = ISetAttr<T>;

type ISetAttr<T> = SizeAttr<Type>;

type SizeAttr<T> = ISizeAttr_None<T> | ISizeAttr_Size<T> | ISizeAttr_MinSize<T> | ISizeAttr_MaxSize<T> | ISizeAttr_MinMaxSize<T>;

interface ISizeAttr_None<T> {
  tag: "SizeAttr_None";
}

interface ISizeAttr_Size<T> {
  tag: "SizeAttr_Size";
  contents: Type;
}

interface ISizeAttr_MinSize<T> {
  tag: "SizeAttr_MinSize";
  contents: Type;
}

interface ISizeAttr_MaxSize<T> {
  tag: "SizeAttr_MaxSize";
  contents: Type;
}

interface ISizeAttr_MinMaxSize<T> {
  tag: "SizeAttr_MinMaxSize";
  contents: [Type, Type];
}

type Statement = IDeclaration | ISearchOrder | ISearchHeuristic | IWhere | IObjective | ISuchThat;

interface IDeclaration {
  tag: "Declaration";
  contents: Declaration;
}

interface ISearchOrder {
  tag: "SearchOrder";
  contents: SearchOrder[];
}

interface ISearchHeuristic {
  tag: "SearchHeuristic";
  contents: Name;
}

interface IWhere {
  tag: "Where";
  contents: Expression[];
}

interface IObjective {
  tag: "Objective";
  contents: [Objective, Expression];
}

interface ISuchThat {
  tag: "SuchThat";
  contents: Expression[];
}

type Strategy = IPickFirst | IPickAll | IInteractive | IAtRandom | ICompact | ISparse | IAuto;

interface IPickFirst {
  tag: "PickFirst";
}

interface IPickAll {
  tag: "PickAll";
}

interface IInteractive {
  tag: "Interactive";
}

interface IAtRandom {
  tag: "AtRandom";
}

interface ICompact {
  tag: "Compact";
}

interface ISparse {
  tag: "Sparse";
}

interface IAuto {
  tag: "Auto";
  contents: Strategy;
}

type TrailRewrites = ITrailRewrites;

interface ITrailRewrites {
  trRule: string;
  trBefore: string[];
  trAfter: string[];
}

type Type = ITypeAny | ITypeBool | ITypeInt | ITypeEnum | ITypeUnnamed | ITypeTuple | ITypeRecord | ITypeRecordMember | ITypeVariant | ITypeVariantMember | ITypeList | ITypeMatrix | ITypeSet | ITypeMSet | ITypeFunction | ITypeSequence | ITypeRelation | ITypePartition;

interface ITypeAny {
  tag: "TypeAny";
}

interface ITypeBool {
  tag: "TypeBool";
}

interface ITypeInt {
  tag: "TypeInt";
  contents: IntTag;
}

interface ITypeEnum {
  tag: "TypeEnum";
  contents: Name;
}

interface ITypeUnnamed {
  tag: "TypeUnnamed";
  contents: Name;
}

interface ITypeTuple {
  tag: "TypeTuple";
  contents: Type[];
}

interface ITypeRecord {
  tag: "TypeRecord";
  contents: [Name, Type][];
}

interface ITypeRecordMember {
  tag: "TypeRecordMember";
  contents: [Name, [Name, Type][]];
}

interface ITypeVariant {
  tag: "TypeVariant";
  contents: [Name, Type][];
}

interface ITypeVariantMember {
  tag: "TypeVariantMember";
  contents: [Name, [Name, Type][]];
}

interface ITypeList {
  tag: "TypeList";
  contents: Type;
}

interface ITypeMatrix {
  tag: "TypeMatrix";
  contents: [Type, Type];
}

interface ITypeSet {
  tag: "TypeSet";
  contents: Type;
}

interface ITypeMSet {
  tag: "TypeMSet";
  contents: Type;
}

interface ITypeFunction {
  tag: "TypeFunction";
  contents: [Type, Type];
}

interface ITypeSequence {
  tag: "TypeSequence";
  contents: Type;
}

interface ITypeRelation {
  tag: "TypeRelation";
  contents: Type[];
}

interface ITypePartition {
  tag: "TypePartition";
  contents: Type;
}
