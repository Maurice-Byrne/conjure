language Essence 1.3

given m1_min: int(1..20)
given m1_max: int(1..20)
find m1: int(1..20)
such that
    m1 >= m1_min,
    m1 <= m1_max
given m2_min: int(1..20)
given m2_max: int(1..20)
find m2: int(1..20)
such that
    m2 >= m2_min,
    m2 <= m2_max
given f_cardMin: int(1..20)
given f_cardMax: int(1..20)
given f_defined_min: int(1..20)
given f_defined_max: int(1..20)
given f_percentage: int(0..100)
find f: function (minSize 1, maxSize 20) int(1..20) --> bool
such that
    |f| >= f_cardMin /\ |f| <= f_cardMax,
    |f| >= 1,
    and([q1[1] >= f_defined_min | q1 <- f]),
    and([q1[1] <= f_defined_max | q1 <- f]),
    and([q1[1] >= m1 | q1 <- f]),
    and([q1[1] <= m2 | q1 <- f]),
    sum([toInt(q1[2]) | q1 <- f]) = f_percentage * |defined(f)| / 100
language Essence 1.3

given m1_min: int(1..20)
given m1_max: int(1..20)
find repair_m1_min: int(1..20)
find repair_m1_max: int(1..20)
such that repair_m1_min <= repair_m1_max
given m2_min: int(1..20)
given m2_max: int(1..20)
find repair_m2_min: int(1..20)
find repair_m2_max: int(1..20)
such that repair_m2_min <= repair_m2_max
given f_cardMin: int(1..20)
given f_cardMax: int(1..20)
given f_defined_min: int(1..20)
given f_defined_max: int(1..20)
given f_percentage: int(0..100)
find repair_f_cardMin: int(1..20)
find repair_f_cardMax: int(1..20)
find repair_f_defined_min: int(1..20)
find repair_f_defined_max: int(1..20)
find repair_f_percentage: int(0..100)
such that
    repair_f_cardMin <= repair_f_cardMax,
    repair_f_defined_max - repair_f_defined_min + 1 >= repair_f_cardMax,
    repair_f_defined_min <= repair_f_defined_max
minimising
    sum([|repair_m1_min - m1_min|, |repair_m1_max - m1_max|, |repair_m2_min - m2_min|, |repair_m2_max - m2_max|,
         |repair_f_cardMin - f_cardMin|, |repair_f_cardMax - f_cardMax|, |repair_f_defined_min - f_defined_min|,
         |repair_f_defined_max - f_defined_max|, |repair_f_percentage - f_percentage|;
             int(1..9)])
