language Essence 1.3

given f1_percentage: int(0..100)
find f1: function int(1..10) --> bool
such that
    and([q1 >= 1 /\ q1 <= 10 <-> q1 in defined(f1) | q1 : int(1..10)]),
    sum([toInt(q1[2]) | q1 <- f1]) = f1_percentage * |defined(f1)| / 100
language Essence 1.3

given f1_percentage: int(0..100)
find repaired_f1_percentage: int(0..100)
such that f1_defined_min <= f1_defined_max
minimising sum([|repaired_f1_percentage - f1_percentage|; int(1)])
