$ conjure parameter-generator function.essence --essence-out function-gen.essence
File: function-gen.essence
language Essence 1.3

given a_middle: int(1..10)
given a_delta: int(0..4)
find a: int(1..10)
such that
    a >= a_middle - a_delta,
    a <= a_middle + a_delta
given b_middle: int(1..10)
given b_delta: int(0..4)
find b: int(1..10)
such that
    b >= b_middle - b_delta,
    b <= b_middle + b_delta
given c_middle: int(1..10)
given c_delta: int(0..4)
find c: int(1..10)
such that
    c >= c_middle - c_delta,
    c <= c_middle + c_delta
given s_middle: int(1..10)
given s_delta: int(0..4)
find s: int(1..10)
such that
    s >= s_middle - s_delta,
    s <= s_middle + s_delta
given f_1_middle: int(1..10)
given f_1_delta: int(0..4)
given f_2_middle: int(1..100)
given f_2_delta: int(0..49)
find f: function (total, injective) int(1..10) --> int(1..100)
such that
    and([q1[1] >= f_1_middle - f_1_delta | q1 <- f]),
    and([q1[1] <= f_1_middle + f_1_delta | q1 <- f]),
    and([q1[1] >= a | q1 <- f]),
    and([q1[1] <= b | q1 <- f]),
    and([q1[2] >= f_2_middle - f_2_delta | q1 <- f]),
    and([q1[2] <= f_2_middle + f_2_delta | q1 <- f]),
    and([q1[2] >= c | q1 <- f])

--------------------


File: function-gen.essence.irace
a_middle "-a_middle " i (1, 10)
a_delta "-a_delta " i (0, 4)
b_middle "-b_middle " i (1, 10)
b_delta "-b_delta " i (0, 4)
c_middle "-c_middle " i (1, 10)
c_delta "-c_delta " i (0, 4)
s_middle "-s_middle " i (1, 10)
s_delta "-s_delta " i (0, 4)
f_1_middle "-f_1_middle " i (1, 10)
f_1_delta "-f_1_delta " i (0, 4)
f_2_middle "-f_2_middle " i (1, 100)
f_2_delta "-f_2_delta " i (0, 49)
--------------------


$ conjure parameter-generator function.essence --essence-out function-gen.essence --MININT -10 --MAXINT 50
File: function-gen.essence
language Essence 1.3

given a_middle: int(1..10)
given a_delta: int(0..4)
find a: int(1..10)
such that
    a >= a_middle - a_delta,
    a <= a_middle + a_delta
given b_middle: int(1..10)
given b_delta: int(0..4)
find b: int(1..10)
such that
    b >= b_middle - b_delta,
    b <= b_middle + b_delta
given c_middle: int(1..10)
given c_delta: int(0..4)
find c: int(1..10)
such that
    c >= c_middle - c_delta,
    c <= c_middle + c_delta
given s_middle: int(1..10)
given s_delta: int(0..4)
find s: int(1..10)
such that
    s >= s_middle - s_delta,
    s <= s_middle + s_delta
given f_1_middle: int(1..10)
given f_1_delta: int(0..4)
given f_2_middle: int(1..50)
given f_2_delta: int(0..24)
find f: function (total, injective) int(1..10) --> int(1..50)
such that
    and([q1[1] >= f_1_middle - f_1_delta | q1 <- f]),
    and([q1[1] <= f_1_middle + f_1_delta | q1 <- f]),
    and([q1[1] >= a | q1 <- f]),
    and([q1[1] <= b | q1 <- f]),
    and([q1[2] >= f_2_middle - f_2_delta | q1 <- f]),
    and([q1[2] <= f_2_middle + f_2_delta | q1 <- f]),
    and([q1[2] >= c | q1 <- f])

--------------------


File: function-gen.essence.irace
a_middle "-a_middle " i (1, 10)
a_delta "-a_delta " i (0, 4)
b_middle "-b_middle " i (1, 10)
b_delta "-b_delta " i (0, 4)
c_middle "-c_middle " i (1, 10)
c_delta "-c_delta " i (0, 4)
s_middle "-s_middle " i (1, 10)
s_delta "-s_delta " i (0, 4)
f_1_middle "-f_1_middle " i (1, 10)
f_1_delta "-f_1_delta " i (0, 4)
f_2_middle "-f_2_middle " i (1, 50)
f_2_delta "-f_2_delta " i (0, 24)
--------------------


