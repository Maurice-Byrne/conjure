$ conjure parameter-generator problem.essence --essence-out problem-gen.essence
File: problem-gen.essence
language Essence 1.3

given a_min: int(1..10)
given a_max: int(1..10)
find a: int(1..10)
such that
    a >= a_min,
    a <= a_max
given b_min: int(1..10)
given b_max: int(1..10)
find b: int(1..10)
such that
    b >= b_min,
    b <= b_max
given c_min: int(1..10)
given c_max: int(1..10)
find c: int(1..10)
such that
    c >= c_min,
    c <= c_max
given s_min: int(1..10)
given s_max: int(1..10)
find s: int(1..10)
such that
    s >= s_min,
    s <= s_max
given f_range_min: int(1..100)
given f_range_max: int(1..100)
find f: function (injective) int(1..10) --> int(1..100)
such that
    and([q1 >= a /\ q1 <= b <-> q1 in defined(f) | q1 : int(1..10)]),
    and([q1[2] >= f_range_min | q1 <- f]),
    and([q1[2] <= f_range_max | q1 <- f]),
    and([q1[2] >= c | q1 <- f])
given g_cardMin: int(1..10)
given g_cardMax: int(1..10)
given g_defined_min: int(1..10)
given g_defined_max: int(1..10)
given g_range_min: int(1..100)
given g_range_max: int(1..100)
find g: function (minSize 1, maxSize 10, injective) int(1..10) --> int(1..100)
such that
    |g| >= g_cardMin /\ |g| <= g_cardMax,
    |g| >= s,
    |g| <= s,
    and([q2[1] >= g_defined_min | q2 <- g]),
    and([q2[1] <= g_defined_max | q2 <- g]),
    and([q2[1] >= a | q2 <- g]),
    and([q2[1] <= b | q2 <- g]),
    and([q2[2] >= g_range_min | q2 <- g]),
    and([q2[2] <= g_range_max | q2 <- g]),
    and([q2[2] >= c | q2 <- g])
given h_cardMin: int(1..100)
given h_cardMax: int(1..100)
given h_defined_min: int(1..10)
given h_defined_max: int(1..10)
given h_range_min: int(1..100)
given h_range_max: int(1..100)
find h: function (minSize 1, maxSize 100, injective) int(1..10) --> int(1..100)
such that
    |h| >= h_cardMin /\ |h| <= h_cardMax,
    |h| >= s,
    and([q3[1] >= h_defined_min | q3 <- h]),
    and([q3[1] <= h_defined_max | q3 <- h]),
    and([q3[1] >= a | q3 <- h]),
    and([q3[1] <= b | q3 <- h]),
    and([q3[2] >= h_range_min | q3 <- h]),
    and([q3[2] <= h_range_max | q3 <- h]),
    and([q3[2] >= c | q3 <- h])
given k_cardMin: int(0..100)
given k_cardMax: int(0..100)
given k_defined_min: int(1..10)
given k_defined_max: int(1..10)
given k_range_min: int(1..100)
given k_range_max: int(1..100)
find k: function (maxSize 100) int(1..10) --> int(1..100)
such that
    |k| >= k_cardMin /\ |k| <= k_cardMax,
    and([q4[1] >= k_defined_min | q4 <- k]),
    and([q4[1] <= k_defined_max | q4 <- k]),
    and([q4[1] >= a | q4 <- k]),
    and([q4[1] <= b | q4 <- k]),
    and([q4[2] >= k_range_min | q4 <- k]),
    and([q4[2] <= k_range_max | q4 <- k]),
    and([q4[2] >= c | q4 <- k])
such that g != h

--------------------


File: problem-gen.essence.irace
a_min "-a_min " i (1, 10)
a_max "-a_max " i (1, 10)
b_min "-b_min " i (1, 10)
b_max "-b_max " i (1, 10)
c_min "-c_min " i (1, 10)
c_max "-c_max " i (1, 10)
s_min "-s_min " i (1, 10)
s_max "-s_max " i (1, 10)
f_range_min "-f_range_min " i (1, 100)
f_range_max "-f_range_max " i (1, 100)
g_cardMin "-g_cardMin " i (1, 10)
g_cardMax "-g_cardMax " i (1, 10)
g_defined_min "-g_defined_min " i (1, 10)
g_defined_max "-g_defined_max " i (1, 10)
g_range_min "-g_range_min " i (1, 100)
g_range_max "-g_range_max " i (1, 100)
h_cardMin "-h_cardMin " i (1, 100)
h_cardMax "-h_cardMax " i (1, 100)
h_defined_min "-h_defined_min " i (1, 10)
h_defined_max "-h_defined_max " i (1, 10)
h_range_min "-h_range_min " i (1, 100)
h_range_max "-h_range_max " i (1, 100)
k_cardMin "-k_cardMin " i (0, 100)
k_cardMax "-k_cardMax " i (0, 100)
k_defined_min "-k_defined_min " i (1, 10)
k_defined_max "-k_defined_max " i (1, 10)
k_range_min "-k_range_min " i (1, 100)
k_range_max "-k_range_max " i (1, 100)

--------------------


$ conjure parameter-generator problem.essence --essence-out problem-gen.essence --MININT -10 --MAXINT 50
File: problem-gen.essence
language Essence 1.3

given a_min: int(1..10)
given a_max: int(1..10)
find a: int(1..10)
such that
    a >= a_min,
    a <= a_max
given b_min: int(1..10)
given b_max: int(1..10)
find b: int(1..10)
such that
    b >= b_min,
    b <= b_max
given c_min: int(1..10)
given c_max: int(1..10)
find c: int(1..10)
such that
    c >= c_min,
    c <= c_max
given s_min: int(1..10)
given s_max: int(1..10)
find s: int(1..10)
such that
    s >= s_min,
    s <= s_max
given f_range_min: int(1..50)
given f_range_max: int(1..50)
find f: function (injective) int(1..10) --> int(1..50)
such that
    and([q1 >= a /\ q1 <= b <-> q1 in defined(f) | q1 : int(1..10)]),
    and([q1[2] >= f_range_min | q1 <- f]),
    and([q1[2] <= f_range_max | q1 <- f]),
    and([q1[2] >= c | q1 <- f])
given g_cardMin: int(1..10)
given g_cardMax: int(1..10)
given g_defined_min: int(1..10)
given g_defined_max: int(1..10)
given g_range_min: int(1..50)
given g_range_max: int(1..50)
find g: function (minSize 1, maxSize 10, injective) int(1..10) --> int(1..50)
such that
    |g| >= g_cardMin /\ |g| <= g_cardMax,
    |g| >= s,
    |g| <= s,
    and([q2[1] >= g_defined_min | q2 <- g]),
    and([q2[1] <= g_defined_max | q2 <- g]),
    and([q2[1] >= a | q2 <- g]),
    and([q2[1] <= b | q2 <- g]),
    and([q2[2] >= g_range_min | q2 <- g]),
    and([q2[2] <= g_range_max | q2 <- g]),
    and([q2[2] >= c | q2 <- g])
given h_cardMin: int(1..50)
given h_cardMax: int(1..50)
given h_defined_min: int(1..10)
given h_defined_max: int(1..10)
given h_range_min: int(1..50)
given h_range_max: int(1..50)
find h: function (minSize 1, maxSize 50, injective) int(1..10) --> int(1..50)
such that
    |h| >= h_cardMin /\ |h| <= h_cardMax,
    |h| >= s,
    and([q3[1] >= h_defined_min | q3 <- h]),
    and([q3[1] <= h_defined_max | q3 <- h]),
    and([q3[1] >= a | q3 <- h]),
    and([q3[1] <= b | q3 <- h]),
    and([q3[2] >= h_range_min | q3 <- h]),
    and([q3[2] <= h_range_max | q3 <- h]),
    and([q3[2] >= c | q3 <- h])
given k_cardMin: int(-10..50)
given k_cardMax: int(-10..50)
given k_defined_min: int(1..10)
given k_defined_max: int(1..10)
given k_range_min: int(1..50)
given k_range_max: int(1..50)
find k: function (maxSize 50) int(1..10) --> int(1..50)
such that
    |k| >= k_cardMin /\ |k| <= k_cardMax,
    and([q4[1] >= k_defined_min | q4 <- k]),
    and([q4[1] <= k_defined_max | q4 <- k]),
    and([q4[1] >= a | q4 <- k]),
    and([q4[1] <= b | q4 <- k]),
    and([q4[2] >= k_range_min | q4 <- k]),
    and([q4[2] <= k_range_max | q4 <- k]),
    and([q4[2] >= c | q4 <- k])
such that g != h

--------------------


File: problem-gen.essence.irace
a_min "-a_min " i (1, 10)
a_max "-a_max " i (1, 10)
b_min "-b_min " i (1, 10)
b_max "-b_max " i (1, 10)
c_min "-c_min " i (1, 10)
c_max "-c_max " i (1, 10)
s_min "-s_min " i (1, 10)
s_max "-s_max " i (1, 10)
f_range_min "-f_range_min " i (1, 50)
f_range_max "-f_range_max " i (1, 50)
g_cardMin "-g_cardMin " i (1, 10)
g_cardMax "-g_cardMax " i (1, 10)
g_defined_min "-g_defined_min " i (1, 10)
g_defined_max "-g_defined_max " i (1, 10)
g_range_min "-g_range_min " i (1, 50)
g_range_max "-g_range_max " i (1, 50)
h_cardMin "-h_cardMin " i (1, 50)
h_cardMax "-h_cardMax " i (1, 50)
h_defined_min "-h_defined_min " i (1, 10)
h_defined_max "-h_defined_max " i (1, 10)
h_range_min "-h_range_min " i (1, 50)
h_range_max "-h_range_max " i (1, 50)
k_cardMin "-k_cardMin " i (-10, 50)
k_cardMax "-k_cardMax " i (-10, 50)
k_defined_min "-k_defined_min " i (1, 10)
k_defined_max "-k_defined_max " i (1, 10)
k_range_min "-k_range_min " i (1, 50)
k_range_max "-k_range_max " i (1, 50)

--------------------


