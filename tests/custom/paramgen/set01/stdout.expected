$ conjure parameter-generator problem.essence --essence-out problem-gen.essence
File: problem-gen.essence
language Essence 1.3

given a_min: int(1..10)
given a_max: int(1..10)
find a: int(1..10)
such that
    a >= a_min,
    a <= a_max
given b_min: int(1..10)
given b_max: int(1..10)
find b: int(1..10)
such that
    b >= b_min,
    b <= b_max
given c_min: int(1..10)
given c_max: int(1..10)
find c: int(1..10)
such that
    c >= c_min,
    c <= c_max
given s_min: int(1..10)
given s_max: int(1..10)
find s: int(1..10)
such that
    s >= s_min,
    s <= s_max
given f_cardMin: int(0..100)
given f_cardMax: int(0..100)
given f_inner_min: int(1..10)
given f_inner_max: int(1..10)
find f: set (maxSize 100) of int(1..10)
such that
    |f| >= f_cardMin /\ |f| <= f_cardMax,
    and([q1 >= f_inner_min | q1 <- f]),
    and([q1 <= f_inner_max | q1 <- f]),
    and([q1 >= a | q1 <- f]),
    and([q1 <= b | q1 <- f])
given g_cardMin: int(1..10)
given g_cardMax: int(1..10)
given g_inner_min: int(1..10)
given g_inner_max: int(1..10)
find g: set (minSize 1, maxSize 10) of int(1..10)
such that
    |g| >= g_cardMin /\ |g| <= g_cardMax,
    |g| >= s,
    |g| <= s,
    and([q2 >= g_inner_min | q2 <- g]),
    and([q2 <= g_inner_max | q2 <- g]),
    and([q2 >= a | q2 <- g]),
    and([q2 <= b | q2 <- g])
given h_cardMin: int(1..100)
given h_cardMax: int(1..100)
given h_inner_min: int(1..10)
given h_inner_max: int(1..10)
find h: set (minSize 1, maxSize 100) of int(1..10)
such that
    |h| >= h_cardMin /\ |h| <= h_cardMax,
    |h| >= s,
    and([q3 >= h_inner_min | q3 <- h]),
    and([q3 <= h_inner_max | q3 <- h]),
    and([q3 >= a | q3 <- h]),
    and([q3 <= c | q3 <- h])
such that g != h
such that f = g intersect h

--------------------


File: problem-gen.essence.irace
a_min "-a_min " i (1, 10)
a_max "-a_max " i (1, 10)
b_min "-b_min " i (1, 10)
b_max "-b_max " i (1, 10)
c_min "-c_min " i (1, 10)
c_max "-c_max " i (1, 10)
s_min "-s_min " i (1, 10)
s_max "-s_max " i (1, 10)
f_cardMin "-f_cardMin " i (0, 100)
f_cardMax "-f_cardMax " i (0, 100)
f_inner_min "-f_inner_min " i (1, 10)
f_inner_max "-f_inner_max " i (1, 10)
g_cardMin "-g_cardMin " i (1, 10)
g_cardMax "-g_cardMax " i (1, 10)
g_inner_min "-g_inner_min " i (1, 10)
g_inner_max "-g_inner_max " i (1, 10)
h_cardMin "-h_cardMin " i (1, 100)
h_cardMax "-h_cardMax " i (1, 100)
h_inner_min "-h_inner_min " i (1, 10)
h_inner_max "-h_inner_max " i (1, 10)

--------------------


$ conjure parameter-generator problem.essence --essence-out problem-gen.essence --MININT -10 --MAXINT 50
File: problem-gen.essence
language Essence 1.3

given a_min: int(1..10)
given a_max: int(1..10)
find a: int(1..10)
such that
    a >= a_min,
    a <= a_max
given b_min: int(1..10)
given b_max: int(1..10)
find b: int(1..10)
such that
    b >= b_min,
    b <= b_max
given c_min: int(1..10)
given c_max: int(1..10)
find c: int(1..10)
such that
    c >= c_min,
    c <= c_max
given s_min: int(1..10)
given s_max: int(1..10)
find s: int(1..10)
such that
    s >= s_min,
    s <= s_max
given f_cardMin: int(-10..50)
given f_cardMax: int(-10..50)
given f_inner_min: int(1..10)
given f_inner_max: int(1..10)
find f: set (maxSize 50) of int(1..10)
such that
    |f| >= f_cardMin /\ |f| <= f_cardMax,
    and([q1 >= f_inner_min | q1 <- f]),
    and([q1 <= f_inner_max | q1 <- f]),
    and([q1 >= a | q1 <- f]),
    and([q1 <= b | q1 <- f])
given g_cardMin: int(1..10)
given g_cardMax: int(1..10)
given g_inner_min: int(1..10)
given g_inner_max: int(1..10)
find g: set (minSize 1, maxSize 10) of int(1..10)
such that
    |g| >= g_cardMin /\ |g| <= g_cardMax,
    |g| >= s,
    |g| <= s,
    and([q2 >= g_inner_min | q2 <- g]),
    and([q2 <= g_inner_max | q2 <- g]),
    and([q2 >= a | q2 <- g]),
    and([q2 <= b | q2 <- g])
given h_cardMin: int(1..50)
given h_cardMax: int(1..50)
given h_inner_min: int(1..10)
given h_inner_max: int(1..10)
find h: set (minSize 1, maxSize 50) of int(1..10)
such that
    |h| >= h_cardMin /\ |h| <= h_cardMax,
    |h| >= s,
    and([q3 >= h_inner_min | q3 <- h]),
    and([q3 <= h_inner_max | q3 <- h]),
    and([q3 >= a | q3 <- h]),
    and([q3 <= c | q3 <- h])
such that g != h
such that f = g intersect h

--------------------


File: problem-gen.essence.irace
a_min "-a_min " i (1, 10)
a_max "-a_max " i (1, 10)
b_min "-b_min " i (1, 10)
b_max "-b_max " i (1, 10)
c_min "-c_min " i (1, 10)
c_max "-c_max " i (1, 10)
s_min "-s_min " i (1, 10)
s_max "-s_max " i (1, 10)
f_cardMin "-f_cardMin " i (-10, 50)
f_cardMax "-f_cardMax " i (-10, 50)
f_inner_min "-f_inner_min " i (1, 10)
f_inner_max "-f_inner_max " i (1, 10)
g_cardMin "-g_cardMin " i (1, 10)
g_cardMax "-g_cardMax " i (1, 10)
g_inner_min "-g_inner_min " i (1, 10)
g_inner_max "-g_inner_max " i (1, 10)
h_cardMin "-h_cardMin " i (1, 50)
h_cardMax "-h_cardMax " i (1, 50)
h_inner_min "-h_inner_min " i (1, 10)
h_inner_max "-h_inner_max " i (1, 10)

--------------------


