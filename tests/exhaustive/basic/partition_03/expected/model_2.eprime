language ESSENCE' 1.0

find x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Marker: int(0..6)
find x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Values_Explicit: matrix indexed by [int(1..6), int(1..3)] of int(1..6)
such that
    alldifferent_except([toInt(q14 <= x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Marker) *
                         catchUndef(x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Values_Explicit[q14, q15], 0)
                             | q14 : int(1..6), q15 : int(1..3)],
                        0),
    and([q6 + 1 <= x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Marker ->
         x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Values_Explicit[q6, ..] <lex
         x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Values_Explicit[q6 + 1, ..]
             | q6 : int(1..5)]),
    and([q7 > x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Marker ->
         and([x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Values_Explicit[q7, q13] = 1 | q13 : int(1..3)])
             | q7 : int(1..6)]),
    x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Marker <= 6,
    and([q8 <= x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Marker ->
         and([x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Values_Explicit[q8, q9] <
              x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Values_Explicit[q8, q9 + 1]
                  | q9 : int(1..2)])
             | q8 : int(1..6)]),
    6 = sum([toInt(q12 <= x_PartitionAsSet_ExplicitVarSizeWithMarkerR3_Marker) * 3 | q12 : int(1..6)])

