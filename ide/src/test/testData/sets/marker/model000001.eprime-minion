MINION 3
# CSETopLevel_number = 0
# CSETopLevel_eliminated_expressions = 0
# CSETopLevel_total_size = 0
# CSE_active_number = 4
# CSE_active_eliminated_expressions = 12
# CSE_active_total_size = 12
**VARIABLES**
DISCRETE x #
{1..7}
**CONSTRAINTS**
w-inintervalset(x, [1,1,3,3,5,5,7,7])
**VARIABLES**
DISCRETE y #
{2..8}
DISCRETE z #
{3..9}
**CONSTRAINTS**
w-inintervalset(z, [3,3,5,5,7,7,9,9])
**VARIABLES**
DISCRETE s_ExplicitVarSizeWithMarker_Marker #
{1..5}
DISCRETE s_ExplicitVarSizeWithMarker_Values_00001 #
{1..8}
DISCRETE s_ExplicitVarSizeWithMarker_Values_00002 #
{1..9}
DISCRETE s_ExplicitVarSizeWithMarker_Values_00003 #
{1..9}
DISCRETE s_ExplicitVarSizeWithMarker_Values_00004 #
{1..9}
DISCRETE s_ExplicitVarSizeWithMarker_Values_00005 #
{1..8}
DISCRETE u #
{2..8}
BOOL aux0 #Active-CSE: 3 occurrences of this expression or equivalent: (4<=s_ExplicitVarSizeWithMarker_Marker)
BOOL aux1 #Active-CSE: 3 occurrences of this expression or equivalent: (3<=s_ExplicitVarSizeWithMarker_Marker)
BOOL aux2 #Active-CSE: 3 occurrences of this expression or equivalent: (2<=s_ExplicitVarSizeWithMarker_Marker)
BOOL aux3 #Active-CSE: 3 occurrences of this expression or equivalent: (5<=s_ExplicitVarSizeWithMarker_Marker)
DISCRETE aux4 #(aux0 * s_ExplicitVarSizeWithMarker_Values_00004)
{0..9}
DISCRETE aux5 #(aux1 * s_ExplicitVarSizeWithMarker_Values_00003)
{0..9}
DISCRETE aux6 #(aux2 * s_ExplicitVarSizeWithMarker_Values_00002)
{0..9}
DISCRETE aux7 #(aux3 * s_ExplicitVarSizeWithMarker_Values_00005)
{0..8}
DISCRETE aux8 #(u - x)
{1..3}
**SEARCH**
PRINT[[x],[y],[z],[s_ExplicitVarSizeWithMarker_Marker],[s_ExplicitVarSizeWithMarker_Values_00001],[s_ExplicitVarSizeWithMarker_Values_00002],[s_ExplicitVarSizeWithMarker_Values_00003],[s_ExplicitVarSizeWithMarker_Values_00004],[s_ExplicitVarSizeWithMarker_Values_00005],[u]]
VARORDER STATIC [x, y, z, s_ExplicitVarSizeWithMarker_Marker, s_ExplicitVarSizeWithMarker_Values_00001, s_ExplicitVarSizeWithMarker_Values_00002, s_ExplicitVarSizeWithMarker_Values_00003, s_ExplicitVarSizeWithMarker_Values_00004, s_ExplicitVarSizeWithMarker_Values_00005, 1, 1, 1, 1, u]
**CONSTRAINTS**
product(aux0, s_ExplicitVarSizeWithMarker_Values_00004, aux4)
product(aux1, s_ExplicitVarSizeWithMarker_Values_00003, aux5)
product(aux2, s_ExplicitVarSizeWithMarker_Values_00002, aux6)
product(aux3, s_ExplicitVarSizeWithMarker_Values_00005, aux7)
reify(ineq(4, s_ExplicitVarSizeWithMarker_Marker, 0), aux0)
reify(ineq(3, s_ExplicitVarSizeWithMarker_Marker, 0), aux1)
reify(ineq(2, s_ExplicitVarSizeWithMarker_Marker, 0), aux2)
reify(ineq(5, s_ExplicitVarSizeWithMarker_Marker, 0), aux3)
gacalldiff([x, y, z])
modulo(x,2,1)
modulo(z,2,1)
product(z, aux8, 9)
reifyimply(ineq(s_ExplicitVarSizeWithMarker_Values_00001, s_ExplicitVarSizeWithMarker_Values_00002, -1), aux2)
reifyimply(ineq(s_ExplicitVarSizeWithMarker_Values_00002, s_ExplicitVarSizeWithMarker_Values_00003, -1), aux1)
reifyimply(ineq(s_ExplicitVarSizeWithMarker_Values_00003, s_ExplicitVarSizeWithMarker_Values_00004, -1), aux0)
reifyimply(ineq(s_ExplicitVarSizeWithMarker_Values_00004, s_ExplicitVarSizeWithMarker_Values_00005, -1), aux3)
reifyimply(w-literal(s_ExplicitVarSizeWithMarker_Values_00002,1), !aux2)
reifyimply(w-literal(s_ExplicitVarSizeWithMarker_Values_00003,1), !aux1)
reifyimply(w-literal(s_ExplicitVarSizeWithMarker_Values_00004,1), !aux0)
reifyimply(w-literal(s_ExplicitVarSizeWithMarker_Values_00005,1), !aux3)
weightedsumleq([1,-1],[u,x],aux8)
weightedsumgeq([1,-1],[u,x],aux8)
sumleq([x,y],z)
sumgeq([x,y],z)
weightedsumleq([1,-1,-1,-1,1,1,1,1],[s_ExplicitVarSizeWithMarker_Values_00001,x,y,z,aux4,aux5,aux6,aux7],0)
weightedsumgeq([1,-1,-1,-1,1,1,1,1],[s_ExplicitVarSizeWithMarker_Values_00001,x,y,z,aux4,aux5,aux6,aux7],0)
**EOF**
