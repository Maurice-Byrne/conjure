MINION 3
# CSE_active_number = 8
# CSE_active_eliminated_expressions = 22
# CSE_active_total_size = 40
**VARIABLES**
DISCRETE x #
{1..7}
**CONSTRAINTS**
w-inintervalset(x, [1,1,3,3,5,5,7,7])
**VARIABLES**
DISCRETE y #
{2..8}
DISCRETE z #
{3..9}
**CONSTRAINTS**
w-inintervalset(z, [3,3,5,5,7,7,9,9])
**VARIABLES**
DISCRETE s_ExplicitVarSizeWithDummy_00001 #
{1..8}
DISCRETE s_ExplicitVarSizeWithDummy_00002 #
{2..10}
DISCRETE s_ExplicitVarSizeWithDummy_00003 #
{3..10}
DISCRETE s_ExplicitVarSizeWithDummy_00004 #
{4..10}
DISCRETE s_ExplicitVarSizeWithDummy_00005 #
{5..10}
DISCRETE s_ExplicitVarSizeWithDummy_00006 #
{10..10}
DISCRETE s_ExplicitVarSizeWithDummy_00007 #
{10..10}
DISCRETE s_ExplicitVarSizeWithDummy_00008 #
{10..10}
DISCRETE s_ExplicitVarSizeWithDummy_00009 #
{10..10}
DISCRETE u #
{2..8}
BOOL aux0 #Active-CSE: 3 occurrences of this expression or equivalent: (10 != s_ExplicitVarSizeWithDummy_00004)
BOOL aux1 #Active-CSE: 2 occurrences of this expression or equivalent: (10 != s_ExplicitVarSizeWithDummy_00002)
BOOL aux2 #Active-CSE: 3 occurrences of this expression or equivalent: (10 != s_ExplicitVarSizeWithDummy_00008)
BOOL aux3 #Active-CSE: 3 occurrences of this expression or equivalent: (10 != s_ExplicitVarSizeWithDummy_00006)
BOOL aux4 #Active-CSE: 3 occurrences of this expression or equivalent: (10 != s_ExplicitVarSizeWithDummy_00003)
BOOL aux5 #Active-CSE: 3 occurrences of this expression or equivalent: (10 != s_ExplicitVarSizeWithDummy_00007)
BOOL aux6 #Active-CSE: 3 occurrences of this expression or equivalent: (10 != s_ExplicitVarSizeWithDummy_00005)
BOOL aux7 #Active-CSE: 2 occurrences of this expression or equivalent: (10 != s_ExplicitVarSizeWithDummy_00009)
DISCRETE aux8 #(aux0 * s_ExplicitVarSizeWithDummy_00004)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux8, [0,0,4,10])
**VARIABLES**
DISCRETE aux9 #(aux1 * s_ExplicitVarSizeWithDummy_00002)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux9, [0,0,2,10])
**VARIABLES**
DISCRETE aux10 #(aux2 * s_ExplicitVarSizeWithDummy_00008)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux10, [0,0,10,10])
**VARIABLES**
DISCRETE aux11 #(aux3 * s_ExplicitVarSizeWithDummy_00006)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux11, [0,0,10,10])
**VARIABLES**
DISCRETE aux12 #(aux4 * s_ExplicitVarSizeWithDummy_00003)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux12, [0,0,3,10])
**VARIABLES**
DISCRETE aux13 #(aux5 * s_ExplicitVarSizeWithDummy_00007)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux13, [0,0,10,10])
**VARIABLES**
DISCRETE aux14 #(aux6 * s_ExplicitVarSizeWithDummy_00005)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux14, [0,0,5,10])
**VARIABLES**
DISCRETE aux15 #(aux7 * s_ExplicitVarSizeWithDummy_00009)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux15, [0,0,10,10])
**VARIABLES**
DISCRETE aux16 #(u-1*x)
{-5..7}
**SEARCH**
PRINT[[x],[y],[z],[s_ExplicitVarSizeWithDummy_00001],[s_ExplicitVarSizeWithDummy_00002],[s_ExplicitVarSizeWithDummy_00003],[s_ExplicitVarSizeWithDummy_00004],[s_ExplicitVarSizeWithDummy_00005],[s_ExplicitVarSizeWithDummy_00006],[s_ExplicitVarSizeWithDummy_00007],[s_ExplicitVarSizeWithDummy_00008],[s_ExplicitVarSizeWithDummy_00009],[u]]
VARORDER STATIC [x, y, z, s_ExplicitVarSizeWithDummy_00001, s_ExplicitVarSizeWithDummy_00002, s_ExplicitVarSizeWithDummy_00003, s_ExplicitVarSizeWithDummy_00004, s_ExplicitVarSizeWithDummy_00005, s_ExplicitVarSizeWithDummy_00006, s_ExplicitVarSizeWithDummy_00007, s_ExplicitVarSizeWithDummy_00008, s_ExplicitVarSizeWithDummy_00009, u]
VARORDER AUX [x,y,z,s_ExplicitVarSizeWithDummy_00001,s_ExplicitVarSizeWithDummy_00002,s_ExplicitVarSizeWithDummy_00003,s_ExplicitVarSizeWithDummy_00004,s_ExplicitVarSizeWithDummy_00005,s_ExplicitVarSizeWithDummy_00006,s_ExplicitVarSizeWithDummy_00007,s_ExplicitVarSizeWithDummy_00008,s_ExplicitVarSizeWithDummy_00009,u,aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16]
**CONSTRAINTS**
product(aux0, s_ExplicitVarSizeWithDummy_00004, aux8)
product(aux1, s_ExplicitVarSizeWithDummy_00002, aux9)
product(aux2, s_ExplicitVarSizeWithDummy_00008, aux10)
product(aux3, s_ExplicitVarSizeWithDummy_00006, aux11)
product(aux4, s_ExplicitVarSizeWithDummy_00003, aux12)
product(aux5, s_ExplicitVarSizeWithDummy_00007, aux13)
product(aux6, s_ExplicitVarSizeWithDummy_00005, aux14)
product(aux7, s_ExplicitVarSizeWithDummy_00009, aux15)
reify(diseq(10,s_ExplicitVarSizeWithDummy_00004), aux0)
reify(diseq(10,s_ExplicitVarSizeWithDummy_00002), aux1)
reify(diseq(10,s_ExplicitVarSizeWithDummy_00008), aux2)
reify(diseq(10,s_ExplicitVarSizeWithDummy_00006), aux3)
reify(diseq(10,s_ExplicitVarSizeWithDummy_00003), aux4)
reify(diseq(10,s_ExplicitVarSizeWithDummy_00007), aux5)
reify(diseq(10,s_ExplicitVarSizeWithDummy_00005), aux6)
reify(diseq(10,s_ExplicitVarSizeWithDummy_00009), aux7)
gacalldiff([x, y, z])
modulo(x,2,1)
modulo(z,2,1)
product(z, aux16, 9)
ineq(s_ExplicitVarSizeWithDummy_00001, s_ExplicitVarSizeWithDummy_00002, -1)
watched-or({ineq(s_ExplicitVarSizeWithDummy_00002, s_ExplicitVarSizeWithDummy_00003, -1),w-literal(s_ExplicitVarSizeWithDummy_00002,10)})
watched-or({ineq(s_ExplicitVarSizeWithDummy_00003, s_ExplicitVarSizeWithDummy_00004, -1),w-literal(s_ExplicitVarSizeWithDummy_00003,10)})
watched-or({ineq(s_ExplicitVarSizeWithDummy_00004, s_ExplicitVarSizeWithDummy_00005, -1),w-literal(s_ExplicitVarSizeWithDummy_00004,10)})
watched-or({ineq(s_ExplicitVarSizeWithDummy_00005, s_ExplicitVarSizeWithDummy_00006, -1),w-literal(s_ExplicitVarSizeWithDummy_00005,10)})
w-literal(s_ExplicitVarSizeWithDummy_00006,10)
w-literal(s_ExplicitVarSizeWithDummy_00007,10)
w-literal(s_ExplicitVarSizeWithDummy_00008,10)
ineq(!aux1, !aux4, 0)
ineq(!aux4, !aux0, 0)
ineq(!aux0, !aux6, 0)
ineq(!aux6, !aux3, 0)
ineq(!aux3, !aux5, 0)
ineq(!aux5, !aux2, 0)
ineq(!aux2, !aux7, 0)
weightedsumleq([1,-1],[u,x],aux16)
weightedsumgeq([1,-1],[u,x],aux16)
sumleq([x,y],z)
sumgeq([x,y],z)
weightedsumleq([-1,-1,-1,1,1,1,1,1,1,1,1,1],[x,y,z,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,s_ExplicitVarSizeWithDummy_00001],0)
weightedsumgeq([-1,-1,-1,1,1,1,1,1,1,1,1,1],[x,y,z,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,s_ExplicitVarSizeWithDummy_00001],0)
**EOF**
